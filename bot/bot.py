import asyncio
Base.metadata.create_all(bind=engine)


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
with SessionLocal() as db:
user = get_or_create_user(db, message.from_user.id, message.from_user.username)
await message.answer(
"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∫–∞—Ä—Ç–æ—á–µ–∫. –ù–∞–∂–º–∏ /roll —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!"
)


@dp.message(Command("roll"))
async def cmd_roll(message: types.Message):
with SessionLocal() as db:
user = get_or_create_user(db, message.from_user.id, message.from_user.username)
card, total = draw_card(db, user)
if not card:
await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫. –ê–¥–º–∏–Ω –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª –∫–æ–ª–ª–µ–∫—Ü–∏—é.")
return
await message.answer(
f"üéüÔ∏è –í—ã–ø–∞–ª–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: <b>{card.name}</b> (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORY_DISPLAY[card.category]})\n"
f"üíØ –¢–≤–æ–∏ –æ—á–∫–∏: {total}",
parse_mode="HTML",
)


@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
from sqlalchemy import func
from models import UserCard, Card
with SessionLocal() as db:
user = get_or_create_user(db, message.from_user.id, message.from_user.username)
total = (
db.query(func.coalesce(func.sum(UserCard.count * Card.points), 0))
.join(Card, Card.id == UserCard.card_id)
.filter(UserCard.user_id == user.id)
.scalar()
)
# –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
rows = (
db.query(Card.category, func.count(UserCard.id), func.coalesce(func.sum(UserCard.count), 0))
.join(Card, Card.id == UserCard.card_id)
.filter(UserCard.user_id == user.id)
.group_by(Card.category)
.all()
)
lines = [f"–í—Å–µ–≥–æ –æ—á–∫–æ–≤: {int(total)}"]
if rows:
lines.append("–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
for cat, unique_cnt, total_cnt in rows:
lines.append(f"‚Ä¢ {CATEGORY_DISPLAY[cat]} ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {unique_cnt}, –≤—Å–µ–≥–æ: {total_cnt}")
else:
lines.append("–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
await message.answer("\n".join(lines))


async def main():
await dp.start_polling(bot)


if __name__ == "__main__":
asyncio.run(main())