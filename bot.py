from aiogram import Bot, Dispatcher, types, filters
from aiogram.utils import executor
from config import BOT_TOKEN, TRIGGER_MESSAGE
from database import init_db, add_user, update_user, add_card, get_user_info, get_global_top, get_chat_top, get_user_rank_global, get_user_rank_chat, can_roll
from cards import roll_card
from aiogram.types import BotCommand


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

init_db()


@dp.message_handler(commands=["collection"])
async def show_collection(message: types.Message):
    user_id = message.from_user.id
    user, cards = get_user_info(user_id)

    if not user:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±–∏—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '!–∫–∞—Ä—Ç–æ—á–∫–∞' üé¥")
        return

    points, coins = user
    if cards:
        cards_list = "\n".join([f"‚Ä¢ {c}" for c in cards])
    else:
        cards_list = "‚Äî –ø–æ–∫–∞ –ø—É—Å—Ç–æ ‚Äî"

    await message.reply(
        f"üìä –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:\n\n"
        f"‚≠ê –û—á–∫–∏: {points}\n"
        f"üí∞ –ú–æ–Ω–µ—Ç—ã: {coins}\n\n"
        f"üé¥ –ö–∞—Ä—Ç–æ—á–∫–∏:\n{cards_list}"
    )
            

@dp.message_handler(commands=["top"])
async def global_top(message: types.Message):
    user_id = message.from_user.id
    top = get_global_top(limit=10)
    rank, points = get_user_rank_global(user_id)

    if not top:
        await message.reply("üìä –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –ø–æ–∫–∞ –ø—É—Å—Ç!")
        return

    text = "üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for i, (first_name, username, points_top) in enumerate(top, start=1):
        name = f"@{username}" if username else first_name
        text += f"{i}. {name} ‚Äî {points_top} –æ—á–∫–æ–≤\n"

    # —Ç–≤–æ—è –ø–æ–∑–∏—Ü–∏—è
    if points > 0:
        text += f"\nüìà –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {rank}-–µ –º–µ—Å—Ç–æ ({points} –æ—á–∫–æ–≤)"
    else:
        text += "\nüìà –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—á–∫–æ–≤."

    await message.reply(text)


@dp.message_handler(commands=["chattop"])
async def chat_top(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    top = get_chat_top(chat_id, limit=10)
    rank, points = get_user_rank_chat(user_id, chat_id)

    if not top:
        await message.reply("üìä –í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–±–∏–≤–∞–ª –∫–∞—Ä—Ç–æ—á–∫–∏!")
        return

    text = "üí¨ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ —á–∞—Ç–∞:\n\n"
    for i, (first_name, username, points_top) in enumerate(top, start=1):
        name = f"@{username}" if username else first_name
        text += f"{i}. {name} ‚Äî {points_top} –æ—á–∫–æ–≤\n"

    # —Ç–≤–æ—è –ø–æ–∑–∏—Ü–∏—è
    if points > 0:
        text += f"\nüìà –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ —á–∞—Ç–µ: {rank}-–µ –º–µ—Å—Ç–æ ({points} –æ—á–∫–æ–≤)"
    else:
        text += "\nüìà –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—á–∫–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ."

    await message.reply(text)

    
@dp.message_handler(commands=["mytop"])
async def my_top(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    global_rank, global_points = get_user_rank_global(user_id)
    chat_rank, chat_points = get_user_rank_chat(user_id, chat_id)

    if global_points == 0:
        await message.reply("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—á–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —á–µ—Ä–µ–∑ '!–∫–∞—Ä—Ç–æ—á–∫–∞' üé¥")
        return

    text = (f"üìà –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥:\n\n"
            f"üåç –ì–ª–æ–±–∞–ª—å–Ω–æ: {global_rank}-–µ –º–µ—Å—Ç–æ ({global_points} –æ—á–∫–æ–≤)\n"
            f"üí¨ –í —ç—Ç–æ–º —á–∞—Ç–µ: {chat_rank}-–µ –º–µ—Å—Ç–æ ({chat_points} –æ—á–∫–æ–≤)")
    
    await message.reply(text)
    
@dp.message_handler(commands=["help"])
async def help_command(message: types.Message):
    text = (
        "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üé¥ !–∫–∞—Ä—Ç–æ—á–∫–∞ ‚Äî –≤—ã–±–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É\n"
        "üìÇ /–∫–æ–ª–ª–µ–∫—Ü–∏—è ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫\n"
        "üåç /—Ç–æ–ø ‚Äî –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n"
        "üí¨ /—Ç–æ–ø—á–∞—Ç–∞ ‚Äî —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n"
        "üìà /–º–æ–π—Ç–æ–ø ‚Äî –≤–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö\n"
        "‚ÑπÔ∏è /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    )
    await message.reply(text)
    
@dp.message_handler(commands=["memocard"])
@dp.message_handler(filters.Text(equals=["!–º–µ–º–æ–∫–∞—Ä—Ç–∞"]))
async def card_drop(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    first_name = message.from_user.first_name
    username = message.from_user.username

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    allowed, wait_time = can_roll(user_id)
    if not allowed:
        hours = wait_time // 3600
        minutes = (wait_time % 3600) // 60
        await message.reply(f"‚è≥ –í—ã —É–∂–µ –≤—ã–±–∏–≤–∞–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –Ω–µ–¥–∞–≤–Ω–æ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω.")
        return

    add_user(user_id, chat_id, first_name, username)

    rarity, card, points, coins = roll_card()
    new = add_card(user_id, card["name"])

    caption_new = (
        f"üéâ –í–∞–º –≤—ã–ø–∞–ª–∞ {rarity} –∫–∞—Ä—Ç–æ—á–∫–∞:\n<b>{card['name']}</b>\n"
        f"+{points} –æ—á–∫–æ–≤, +{coins} –º–æ–Ω–µ—Ç üí∞"
    )
    caption_repeat = (
        f"üîÅ –ü–æ–≤—Ç–æ—Ä–∫–∞: {rarity} –∫–∞—Ä—Ç–æ—á–∫–∞ <b>{card['name']}</b>\n"
        f"+{points} –æ—á–∫–æ–≤, +{coins+1} –º–æ–Ω–µ—Ç üí∞"
    )

    if new:
        update_user(user_id, points, coins)
        caption = caption_new
    else:
        update_user(user_id, points, coins + 1)
        caption = caption_repeat

    file_path = card["image"].lower()

    if file_path.endswith(".gif"):
        with open(card["image"], "rb") as anim:
            await bot.send_animation(chat_id=chat_id, animation=anim, caption=caption, parse_mode="HTML")

    elif file_path.endswith(".webp"):
        with open(card["image"], "rb") as sticker:
            await bot.send_sticker(chat_id=chat_id, sticker=sticker)
        await bot.send_message(chat_id=chat_id, text=caption, parse_mode="HTML")

    elif file_path.endswith((".mp4", ".mov", ".avi", ".webm")):
        with open(card["image"], "rb") as video:
            await bot.send_video(chat_id=chat_id, video=video, caption=caption, parse_mode="HTML")

    else:
        with open(card["image"], "rb") as photo:
            await bot.send_photo(chat_id=chat_id, photo=photo, caption=caption, parse_mode="HTML")



    
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="memocard", description="–í—ã–±–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É üé¥"),
        BotCommand(command="collection", description="–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫"),
        BotCommand(command="top", description="–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤"),
        BotCommand(command="chattop", description="–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ"),
        BotCommand(command="mytop", description="–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö"),
        BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    ]
    await bot.set_my_commands(commands)



    
if __name__ == "__main__":
    from aiogram import executor

    async def on_startup(dp):
        await set_commands(bot)

    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
